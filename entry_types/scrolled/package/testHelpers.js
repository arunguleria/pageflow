import React, { useEffect } from 'react';
import { render } from '@testing-library/react';
import { renderHook } from '@testing-library/react-hooks/dom';
import { Consent } from 'pageflow/frontend';
import { RootProviders, useEntryStateDispatch } from 'pageflow-scrolled/frontend';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

/**
 * Construct data structure that resembles seed generated by server
 * side JBuilder templates.
 *
 * @param {Object} [options]
 * @param {Object} [options.imageFileUrlTemplates] - Mapping of url template names to url templates.
 * @param {String} [options.prettyUrl] - The entry's url (Default share url).
 * @param {Object} [options.shareUrlTemplates] - Mapping of share provider names to sharing urls.
 * @param {String} [options.defaultFileRights] - Default file rights of entry's account.
 * @param {Object} [options.legalInfo] - imprint, copyright and privacy information of entry.
 * @param {Object} [options.themeOptions] - Options set via theme registration.
 * @param {Object} [options.themeAssets] - Paths to theme assets.
 * @param {Object} [options.additionalSeedData] - Seed data by name.
 * @param {Array} [options.consentVendors] - Server rendered consent vendor data.
 * @param {Object} [options.contentElementConsentVendors] - Consent vendor name by content element id.
 * @param {Object} [options.entry] - attributes of entry.
 * @param {Array} [options.imageFiles] - Array of objects with image file attributes of entry.
 * @param {Array} [options.videoFiles] - Array of objects with video file attributes of entry.
 * @param {Array} [options.audioFiles] - Array of objects with audio file attributes of entry.
 * @param {Array} [options.textTrackFiles] - Array of objects with text track file attributes of entry.
 * @param {Array} [options.chapters] - Array of objects with chapter attributes of entry.
 * @param {Array} [options.sections] - Array of objects with section attributes of entry.
 * @param {Array} [options.contentElements] - Array of objects with content element attributes of entry.
 * @param {Array} [options.widgets] - Array of objects with widget attributes of entry.
 * @returns {Object} - Data that resembles seed generated by server side rendering.
 */
function normalizeSeed() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      imageFileUrlTemplates = _ref.imageFileUrlTemplates,
      fileUrlTemplates = _ref.fileUrlTemplates,
      fileModelTypes = _ref.fileModelTypes,
      prettyUrl = _ref.prettyUrl,
      shareUrlTemplates = _ref.shareUrlTemplates,
      defaultFileRights = _ref.defaultFileRights,
      legalInfo = _ref.legalInfo,
      themeOptions = _ref.themeOptions,
      themeAssets = _ref.themeAssets,
      entry = _ref.entry,
      imageFiles = _ref.imageFiles,
      videoFiles = _ref.videoFiles,
      audioFiles = _ref.audioFiles,
      textTrackFiles = _ref.textTrackFiles,
      chapters = _ref.chapters,
      sections = _ref.sections,
      contentElements = _ref.contentElements,
      widgets = _ref.widgets,
      additionalSeedData = _ref.additionalSeedData,
      consentVendors = _ref.consentVendors,
      contentElementConsentVendors = _ref.contentElementConsentVendors,
      fileLicenses = _ref.fileLicenses;

  var entries = entry ? [entry] : [{}];
  var normalizedEntries = normalizeCollection(entries);
  var normalizedContentElements = normalizeCollection(contentElements, {
    typeName: 'textBlock',
    configuration: {}
  });
  var normalizedSections = normalizeSections(sections, normalizedContentElements);
  var normalizedChapters = normalizeChapters(chapters, normalizedSections);
  return {
    config: {
      fileUrlTemplates: _objectSpread2({
        imageFiles: _objectSpread2({}, imageFileUrlTemplates),
        videoFiles: {},
        audioFiles: {},
        textTrackFiles: {}
      }, fileUrlTemplates),
      fileModelTypes: _objectSpread2({
        audioFiles: 'Pageflow::AudioFile',
        imageFiles: 'Pageflow::ImageFile',
        textTrackFiles: 'Pageflow::TextTrackFile',
        videoFiles: 'Pageflow::VideoFile'
      }, fileModelTypes),
      prettyUrl: prettyUrl,
      shareUrlTemplates: normalizeShareUrlTemplates(shareUrlTemplates),
      defaultFileRights: defaultFileRights,
      legalInfo: normalizeLegalInfo(legalInfo),
      theme: normalizeTheme({
        themeOptions: themeOptions,
        themeAssets: themeAssets
      }),
      additionalSeedData: additionalSeedData || {
        frontendVersion: 1
      },
      consentVendors: consentVendors || [],
      contentElementConsentVendors: contentElementConsentVendors || {},
      fileLicenses: fileLicenses || {}
    },
    collections: {
      entries: normalizedEntries,
      imageFiles: normalizeCollection(imageFiles, {
        isReady: true,
        basename: 'image',
        extension: 'jpg',
        width: 1920,
        height: 1279,
        configuration: {}
      }),
      videoFiles: normalizeCollection(videoFiles, {
        isReady: true,
        width: 1920,
        height: 1279,
        configuration: {}
      }),
      audioFiles: normalizeCollection(audioFiles, {
        isReady: true,
        configuration: {}
      }),
      textTrackFiles: normalizeCollection(textTrackFiles, {
        parentFileId: null,
        parentFileType: null,
        configuration: {}
      }),
      chapters: normalizedChapters,
      sections: normalizedSections,
      contentElements: normalizedContentElements,
      widgets: normalizeWidgets(widgets)
    }
  };
}

function normalizeSections() {
  var sections = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var contentElements = arguments.length > 1 ? arguments[1] : undefined;
  var sectionDefaults = {
    configuration: {
      transition: 'scroll',
      backdrop: {
        image: '#000'
      }
    }
  };

  if (contentElements.length && !sections.length) {
    contentElements.forEach(function (contentElement) {
      return contentElement.sectionId = 10;
    });
    return [_objectSpread2({
      id: 10,
      permaId: 1
    }, sectionDefaults)];
  }

  return normalizeCollection(sections, sectionDefaults).map(function (section) {
    return _objectSpread2(_objectSpread2({}, section), {}, {
      configuration: _objectSpread2({
        transition: sectionDefaults.configuration.transition
      }, section.configuration)
    });
  });
}

function normalizeChapters() {
  var chapters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var sections = arguments.length > 1 ? arguments[1] : undefined;
  var chapterDefaults = {
    configuration: {}
  };

  if (sections.length && !chapters.length) {
    sections.forEach(function (section) {
      return section.chapterId = 100;
    });
    return [_objectSpread2({
      id: 100,
      permaId: 10
    }, chapterDefaults)];
  }

  return normalizeCollection(chapters, chapterDefaults);
}

function normalizeShareUrlTemplates(shareUrlTemplates) {
  if (shareUrlTemplates) {
    return shareUrlTemplates;
  } else {
    return {
      email: 'mailto:?body=%{url}',
      facebook: 'http://www.facebook.com/sharer/sharer.php?u=%{url}',
      google: 'https://plus.google.com/share?url=%{url}',
      linked_in: 'https://www.linkedin.com/shareArticle?mini=true&url=%{url}',
      telegram: 'tg://msg?text=%{url}',
      twitter: 'https://twitter.com/intent/tweet?url=%{url}',
      whats_app: 'WhatsApp://send?text=%{url}'
    };
  }
}

function normalizeLegalInfo(legalInfo) {
  if (legalInfo) {
    return legalInfo;
  } else {
    return {
      imprint: {
        label: '',
        url: ''
      },
      copyright: {
        label: '',
        url: ''
      },
      privacy: {
        label: '',
        url: ''
      }
    };
  }
}

function normalizeTheme(_ref2) {
  var themeAssets = _ref2.themeAssets,
      themeOptions = _ref2.themeOptions;
  return {
    assets: _objectSpread2({
      icons: {}
    }, themeAssets),
    options: _objectSpread2({
      colors: {}
    }, themeOptions)
  };
}

function normalizeWidgets() {
  var widgets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return widgets.map(function (widget) {
    return _objectSpread2({
      permaId: widget.role,
      configuration: {}
    }, widget);
  });
}

function normalizeCollection() {
  var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return collection.map(function (item, index) {
    return _objectSpread2(_objectSpread2({
      id: index + 1,
      permaId: index + 1
    }, defaults), item);
  });
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/**
 * Render a component that depends on entry state. Accepts all options
 * supported by [`render` of
 * `@testing-library/react`](https://testing-library.com/docs/react-testing-library/api#render).
 *
 * The `seed` option can be used to simulate rendering the component
 * in the published entry. Data passed in this option would normally
 * be rendered in a server side JBuilder template.
 *
 * The `setup` option can be used to simulate rendering the component
 * in the editor where data is synchronized from Backbone models.
 *
 * To be able to render components that expect the result of certain
 * hooks as part of their props, instead of a React component, you can
 * pass a function returning a React component as first parameter. The
 * function will be evaluated in a context of a React component and
 * can thus make use of hooks
 *
 *     // DOES NOT WORK
 *     renderInEntry(<Image file={useFile({collectionName: 'imageFiles', permaId: 4})} />, {seed});
 *
 *     // WORKS
 *     renderInEntry(() => <Image file={useFile({collectionName: 'imageFiles', permaId: 4})} />, {seed});
 *
 * When using the `rerender` function from the result, you again need
 * to use the same type of parameter you passed to the original
 * `renderInEntry` call.
 *
 * @param {React.Component|Function} ui - React component or function returning a React component
 * @param {Object} [options]
 * @param {Object} [options.seed] - Seed data for entry state. Passed through {@link normalizeSeed}.
 * @param {Function} [options.setup] -
 *   Function that gets called with the internal entry state dispatch
 *   function. The normalized seed constructed from the `seed` option
 *   is passed as a second parameter.
 */

function renderInEntry(ui) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      seed = _ref.seed,
      setup = _ref.setup,
      wrapper = _ref.wrapper,
      _ref$consent = _ref.consent,
      consent = _ref$consent === void 0 ? Consent.create() : _ref$consent,
      options = _objectWithoutProperties(_ref, ["seed", "setup", "wrapper", "consent"]);

  options = _objectSpread2({
    wrapper: createWrapper(seed, setup, wrapper, consent)
  }, options);

  if (typeof ui === 'function') {
    // Evaluate `ui` inside a React component to allow using hooks in
    // the test. We also could have used `ui` as a React component
    // directly (e.g. `React.createElement(ui)`). But when calling
    // `rerender` with a different function than the one passed to the
    // original `renderInEntry` call, e.g.
    //
    //   const {rerender} = renderInEntry(() => <MyComponent someProp={1} />);
    //   rerender(() => <MyComponent someProp={2} />);
    //
    // React would unmount the `MyComponent` component from the first
    // render call and mount a new one. We therefore define a single
    // component that is reused across rerenders to ensure
    // `MyComponent` stays mounted and just receives new props.
    var HooksWrapper = function HooksWrapper(_ref2) {
      var ui = _ref2.ui;
      return ui();
    };

    var result = render( /*#__PURE__*/React.createElement(HooksWrapper, {
      ui: ui
    }), options);
    return _objectSpread2(_objectSpread2({}, result), {}, {
      rerender: function rerender(ui) {
        result.rerender( /*#__PURE__*/React.createElement(HooksWrapper, {
          ui: ui
        }));
      }
    });
  } else {
    return render(ui, options);
  }
}
/**
 * Render a hook that depends on entry state.  Accepts all options
 * supported by [`renderHook` of
 * `@testing-library/react-hooks`](https://react-hooks-testing-library.com/reference/api)
 *
 * Can be used to test selector hooks which extract information from
 * the entry state.
 *
 * @param {Function} callback - Function that calls the hook.
 * @param {Object} [options]
 * @param {Object} [options.seed] - Seed data for entry state. Passed through {@link normalizeSeed}.
 * @param {Function} [options.setup] - See {@link renderInEntry}.
 */

function renderHookInEntry(callback) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      seed = _ref3.seed,
      setup = _ref3.setup,
      wrapper = _ref3.wrapper,
      options = _objectWithoutProperties(_ref3, ["seed", "setup", "wrapper"]);

  return renderHook(callback, _objectSpread2({
    wrapper: createWrapper(seed, setup, wrapper)
  }, options));
}

function createWrapper(seed, setup, originalWrapper, consent) {
  var normalizedSeed = normalizeSeed(seed);

  var OriginalWrapper = originalWrapper || function Noop(_ref4) {
    var children = _ref4.children;
    return children;
  };

  return function Wrapper(_ref5) {
    var children = _ref5.children;
    return /*#__PURE__*/React.createElement(RootProviders, {
      seed: normalizedSeed,
      consent: consent
    }, /*#__PURE__*/React.createElement(Dispatcher, {
      callback: setup,
      seed: normalizedSeed
    }, /*#__PURE__*/React.createElement(OriginalWrapper, null, children)));
  };
}

function Dispatcher(_ref6) {
  var children = _ref6.children,
      seed = _ref6.seed,
      callback = _ref6.callback;
  var dispatch = useEntryStateDispatch();
  useEffect(function () {
    if (callback) {
      callback(dispatch, seed);
    }
  }, [dispatch, seed, callback]);
  return children;
}

export { normalizeSeed, renderHookInEntry, renderInEntry };
